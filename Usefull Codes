var code = {
	SharePoint2013: {
        SharePoint 2013 REST expand and filter issue (workaround): { 
            var rootUrl = _spPageContextInfo.webAbsoluteUrl, 
				firstAjaxCallUrl = rootUrl + "/_api/web/Lists?$select=Title&$filter=EntityTypeName eq '[TheNameOfTheCustomListTheFirstTimeItWasCreated + 'List']'", 
				secondAjaxUrl = rootUrl + "/_api/web/Lists/GetByTitle('{0}')/items?$filter=OData__ModerationStatus eq 0&$orderby=Created desc&$top=1";
			
			makeAjaxCall(firstAjaxCallUrl).then(function (listData) {
				/*replace '{0}' in secondAjaxUrl with the Title from the returned listData*/
				aboutsUsUrl = aboutsUsUrl.replace('{0}', listData[0].Title); 
				makeAjaxCall(secondAjaxUrl).then(dowhateveryoulike); 
            });
            
            function makeAjaxGetCall(ajaxUrl, errorMsg) {
                var defered = $.Deferred();
                $.ajax({
                    url: ajaxUrl,
                    method: "GET",
                    headers: { "Accept": "application/json; odata=verbose" },
                    success: function (data) {
                        defered.resolve(data.d.results);
                    },
                    error: function (error) {
                        defered.reject(errorMsg + '. Response: ' + error.responseText);
                    }
                });
                return defered.promise();
            }
        } 
    },
	JavaSvript: {
		Get URL Parameters by name: {
			function GetURLParameter(sParam) {
				var sPageURL = window.location.search.substring(1),
					sURLVariables = sPageURL.split('&');
				
				for (var i = 0; i < sURLVariables.length; i++) {
					var sParameterName = sURLVariables[i].split('=');
					
					if (sParameterName[0] == sParam) {
						return sParameterName[1];
					}
				}
			}
		},
		Guid generator: {
			function getGuid() {
				function s4() {
					return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
				}
				
				return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
			}
		},
		Dynamically loading an external JavaScript or CSS file: {
			function loadjscssfile(filename, filetype){
				if (filetype=="js") { //if filename is a external JavaScript file
					var fileref=document.createElement('script');
					fileref.setAttribute("type","text/javascript");
					fileref.setAttribute("src", filename);
				} else if (filetype=="css") { //if filename is an external CSS file
					var fileref=document.createElement("link");
					fileref.setAttribute("rel", "stylesheet");
					fileref.setAttribute("type", "text/css");
					fileref.setAttribute("href", filename);
				}
				if (typeof fileref!="undefined") {
					document.getElementsByTagName("head")[0].appendChild(fileref);
				}
			}
			
			//example usage:
			loadjscssfile("myscript.js", "js") //dynamically load and add this .js file
			loadjscssfile("javascript.php", "js") //dynamically load "javascript.php" as a JavaScript file
			loadjscssfile("mystyle.css", "css") ////dynamically load and add this .css file
		},
		Extract root domain name from string :{
			function extractDomain(url) {
				var domain;
				//find & remove protocol (http, ftp, etc.) and get domain
				if (url.indexOf("://") > -1) {
					domain = url.split('/')[2];
				} else {
					domain = url.split('/')[0];
				}
				
				//find & remove port number
				domain = domain.split(':')[0];
				return domain;
			}
		}
	}
}
